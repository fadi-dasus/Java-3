package server;

import java.io.IOException;
import java.io.Serializable;

import requestreply.Message;
import tasks.Task;
import tasks.TaskList;
import util.ByteConverter;

public class TaskDispatcher implements Recipient
{
  
   TaskList taskList;

   public TaskDispatcher(TaskList list)
   {
      this.taskList = list;
   }
   @Override
   public byte[] interpret(Message message) {
      switch (message.getMethod()) {
      case "add":
         try {
            taskList.add((Task) ByteConverter.serializableFromByteArray(message.getArgs()[0]));
         } catch (ClassNotFoundException e) {
            e.printStackTrace();
         } catch (IOException e) {
            e.printStackTrace();
         }
         return null;
      case "getAndRemove":
         Task t = taskList.getAndRemoveNextTask();
         byte[] task = ByteConverter.toByteArray(t);
         return task;
      case "size":
         byte[] size = ByteConverter.toByteArray(taskList.size());
         return size;
      default:
         return null;
      }


   }
   

}
